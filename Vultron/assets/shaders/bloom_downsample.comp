#version 460 core

// Shader inspired by LearnOpenGL Bloom tutorial: https://learnopengl.com/Guest-Articles/2022/Phys.-Based-Bloom

layout(set = 0, binding = 0) uniform sampler2D sourceTexture;
layout(set = 0, binding = 1, rgba16f) uniform writeonly image2D outputImage;

// Push constants
layout(push_constant) uniform PushConstants
{
    uint mipLevel;
} pc;


vec3 PowVec3(vec3 v, float p)
{
    return vec3(pow(v.x, p), pow(v.y, p), pow(v.z, p));
}

const float invGamma = 1.0 / 2.2;
vec3 ToSRGB(vec3 v)   { return PowVec3(v, invGamma); }

float sRGBToLuma(vec3 col)
{
    //return dot(col, vec3(0.2126f, 0.7152f, 0.0722f));
	return dot(col, vec3(0.299f, 0.587f, 0.114f));
}

float KarisAverage(vec3 col)
{
	// Formula is 1 / (1 + luma)
	float luma = sRGBToLuma(ToSRGB(col)) * 0.25f;
	return 1.0f / (1.0f + luma);
}

layout (local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

// If the color is not bright enough, we will not save it.
vec3 ThresholdFilter(vec3 color, float threshold)
{
	if (color.r < threshold && color.g < threshold && color.b < threshold)
		return vec3(0.0);
	return color;
}

// NOTE: This is the readable version of this shader. It will be optimized!
void main()
{
    ivec2 sourceTextureSize = textureSize(sourceTexture, 0);
	vec2 srcTexelSize = 1.0 / vec2(sourceTextureSize);
	float x = srcTexelSize.x;
	float y = srcTexelSize.y;

    vec2 texCoord = (vec2(gl_GlobalInvocationID.xy) + vec2(0.5)) / vec2(imageSize(outputImage));

	// Take 13 samples around current texel:
	// a - b - c
	// - j - k -
	// d - e - f
	// - l - m -
	// g - h - i
	// === ('e' is the current texel) ===

	vec3 a = texture(sourceTexture, vec2(texCoord.x - 2*x, texCoord.y + 2*y)).rgb;
	vec3 b = texture(sourceTexture, vec2(texCoord.x,       texCoord.y + 2*y)).rgb;
	vec3 c = texture(sourceTexture, vec2(texCoord.x + 2*x, texCoord.y + 2*y)).rgb;
	vec3 d = texture(sourceTexture, vec2(texCoord.x - 2*x, texCoord.y)).rgb;
	vec3 e = texture(sourceTexture, vec2(texCoord.x,       texCoord.y)).rgb;
	vec3 f = texture(sourceTexture, vec2(texCoord.x + 2*x, texCoord.y)).rgb;
	vec3 g = texture(sourceTexture, vec2(texCoord.x - 2*x, texCoord.y - 2*y)).rgb;
	vec3 h = texture(sourceTexture, vec2(texCoord.x,       texCoord.y - 2*y)).rgb;
	vec3 i = texture(sourceTexture, vec2(texCoord.x + 2*x, texCoord.y - 2*y)).rgb;
	vec3 j = texture(sourceTexture, vec2(texCoord.x - x, texCoord.y + y)).rgb;
	vec3 k = texture(sourceTexture, vec2(texCoord.x + x, texCoord.y + y)).rgb;
	vec3 l = texture(sourceTexture, vec2(texCoord.x - x, texCoord.y - y)).rgb;
	vec3 m = texture(sourceTexture, vec2(texCoord.x + x, texCoord.y - y)).rgb;

    vec3 downsample;
	// Check if we need to perform Karis average on each block of 4 samples
	vec3 groups[5];
	switch (pc.mipLevel)
	{
	case 0:
		// Also apply prefiltering to the texture, only save colors that are not too bright.
		// const float threshold = 1.0; 
		// a = ThresholdFilter(a, threshold);
		// b = ThresholdFilter(b, threshold); 
		// c = ThresholdFilter(c, threshold);
		// d = ThresholdFilter(d, threshold);
		// e = ThresholdFilter(e, threshold);
		// f = ThresholdFilter(f, threshold);
		// g = ThresholdFilter(g, threshold);
		// h = ThresholdFilter(h, threshold);
		// i = ThresholdFilter(i, threshold);
		// j = ThresholdFilter(j, threshold);
		// k = ThresholdFilter(k, threshold);
		// l = ThresholdFilter(l, threshold);
		// m = ThresholdFilter(m, threshold);
		
		groups[0] = (a+b+d+e) * (0.125f/4.0f);
		groups[1] = (b+c+e+f) * (0.125f/4.0f);
		groups[2] = (d+e+g+h) * (0.125f/4.0f);
		groups[3] = (e+f+h+i) * (0.125f/4.0f);
		groups[4] = (j+k+l+m) * (0.5f/4.0f);
		groups[0] *= KarisAverage(groups[0]);
		groups[1] *= KarisAverage(groups[1]);
		groups[2] *= KarisAverage(groups[2]);
		groups[3] *= KarisAverage(groups[3]);
		groups[4] *= KarisAverage(groups[4]);
		downsample = groups[0]+groups[1]+groups[2]+groups[3]+groups[4];
		downsample = max(downsample, 0.0001f);
	  break;
	default:
		downsample = e*0.125;                // ok
		downsample += (a+c+g+i)*0.03125;     // ok
	  	downsample += (b+d+f+h)*0.0625;      // ok
	  	downsample += (j+k+l+m)*0.125;       // ok
	  break;
	}

    imageStore(outputImage, ivec2(gl_GlobalInvocationID.xy), vec4(downsample, 1.0));
}