#version 460 core

// Shader inspired by LearnOpenGL Bloom tutorial: https://learnopengl.com/Guest-Articles/2022/Phys.-Based-Bloom

layout(set = 0, binding = 0) uniform sampler2D srcTexture;
layout(set = 0, binding = 1, rgba16f) uniform writeonly image2D dstImage;

// Push constants
layout(push_constant) uniform PushConstants
{
    float filterRadius;
} pc;

layout (local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

void main()
{
	// The filter kernel is applied with a radius, specified in texture
	// coordinates, so that the radius will vary across mip resolutions.
	float x = pc.filterRadius;
	float y = pc.filterRadius;

    // Calculate the UV coordinates for the source image sample. They are the index of the pixel and need to be converted to texture coordinates.
    vec2 texCoord = (vec2(gl_GlobalInvocationID.xy) / vec2(imageSize(dstImage)));

    vec3 upsample = vec3(0.0);
	// Take 9 samples around current texel:
	// a - b - c
	// d - e - f
	// g - h - i
	// === ('e' is the current texel) ===
	vec3 a = texture(srcTexture, vec2(texCoord.x - x, texCoord.y + y)).rgb;
	vec3 b = texture(srcTexture, vec2(texCoord.x,     texCoord.y + y)).rgb;
	vec3 c = texture(srcTexture, vec2(texCoord.x + x, texCoord.y + y)).rgb;

	vec3 d = texture(srcTexture, vec2(texCoord.x - x, texCoord.y)).rgb;
	vec3 e = texture(srcTexture, vec2(texCoord.x,     texCoord.y)).rgb;
	vec3 f = texture(srcTexture, vec2(texCoord.x + x, texCoord.y)).rgb;

	vec3 g = texture(srcTexture, vec2(texCoord.x - x, texCoord.y - y)).rgb;
	vec3 h = texture(srcTexture, vec2(texCoord.x,     texCoord.y - y)).rgb;
	vec3 i = texture(srcTexture, vec2(texCoord.x + x, texCoord.y - y)).rgb;

	// Apply weighted distribution, by using a 3x3 tent filter:
	//  1   | 1 2 1 |
	// -- * | 2 4 2 |
	// 16   | 1 2 1 |
	upsample = e*4.0;
	upsample += (b+d+f+h)*2.0;
	upsample += (a+c+g+i);
	upsample *= 1.0 / 16.0;

    // Write the upsampled color to the destination image:
    imageStore(dstImage, ivec2(gl_GlobalInvocationID.xy), vec4(upsample, 1.0));
}