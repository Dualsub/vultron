#version 460

struct InstanceData {
    mat4 model;
    ivec4 boneAndInstanceOffsetAndCount;
    int boneOutputOffset;
};

layout(std140, set = 0, binding = 0) readonly buffer InstanceBufferObject {
    InstanceData instances[];
};

struct SkeletonBone {
    mat4 offset;
    int parent;
};

layout(set = 0, binding = 1) uniform SkeletonBoneObject {
    SkeletonBone bones[128];
};

struct AnimationFrame {
    vec3 position;
    vec4 rotation;
    vec3 scale;
};

layout(std140, set = 0, binding = 2) readonly buffer AnimationBufferObject {
    AnimationFrame frames[];
};

struct AnimationInstance {
    ivec3 frameOffsetAnd1And2;
    vec2 timeAndBlendFactor;
};

layout(set = 0, binding = 3) uniform AnimationInstanceObject {
    AnimationInstance animationInstances[128];
};

layout(std140, set = 0, binding = 4) writeonly buffer BoneOutputBufferObject {
    mat4 boneOutput[];
};

vec3 QMulV(vec4 q, vec3 v) {
    return q.xyz * 2.0f * dot(q.xyz, v) +
           v * (q.w * q.w - dot(q.xyz, q.xyz)) +
           cross(q.xyz, v) * 2.0f * q.w;
}

vec4 QMul(vec4 q1, vec4 q2) {
    return vec4(
        q1.w * q2.x + q1.x * q2.w + q1.y * q2.z - q1.z * q2.y,
        q1.w * q2.y - q1.x * q2.z + q1.y * q2.w + q1.z * q2.x,
        q1.w * q2.z + q1.x * q2.y - q1.y * q2.x + q1.z * q2.w,
        q1.w * q2.w - q1.x * q2.x - q1.y * q2.y - q1.z * q2.z
    );
}

mat4 ToMatrix(vec3 position, vec4 rotation, vec3 scale) {
    vec3 xBasis = QMulV(rotation, vec3(scale.x, 0, 0));
    vec3 yBasis = QMulV(rotation, vec3(0, scale.y, 0));
    vec3 zBasis = QMulV(rotation, vec3(0, 0, scale.z));

    return mat4(
        xBasis.x, xBasis.y, xBasis.z, 0.0,
        yBasis.x, yBasis.y, yBasis.z, 0.0,
        zBasis.x, zBasis.y, zBasis.z, 0.0,
        position.x, position.y, position.z, 1.0
    );
}

vec4 slerp(vec4 q1, vec4 q2, float t) {
    // Compute the cosine of the angle between the two vectors.
    float cosTheta = dot(q1, q2);

    // If cosTheta < 0, the interpolation will take the long way around the sphere. 
    // To fix this, one quaternion is negated.
    if (cosTheta < 0.0) {
        q1 = -q1;
        cosTheta = -cosTheta;
    }

    // Perform a linear interpolation when cosTheta is close to 1 to avoid side effect of sin(angle) becoming a zero denominator
    if (cosTheta > 1.0 - 1E-6) {
        // Linear interpolation
        return mix(q1, q2, t);
    } else {
        // Essential Mathematics for SLERP
        float angle = acos(cosTheta);
        return (sin((1.0 - t) * angle) * q1 + sin(t * angle) * q2) / sin(angle);
    }
}

struct BonePose {
    vec3 position;
    vec4 rotation;
    vec3 scale;
};

mat4 GetPose(int animationInstanceOffset, int animationInstanceCount, int boneIndex, int boneOffset, int boneCount)
{
    mat4 boneMatrix = mat4(1.0);
    int currBoneIndex = boneIndex;

    for (int b = 0; b < boneCount; b++)
    { 
        float totalBlendFactor = 0.0;
        BonePose accPose = BonePose(vec3(0.0), vec4(0.0, 0.0, 0.0, 1.0), vec3(1.0));
        
        for (int i = 0; i < animationInstanceCount; i++) {
            int frameOffset = animationInstances[animationInstanceOffset + i].frameOffsetAnd1And2.x;
            int frame1 = animationInstances[animationInstanceOffset + i].frameOffsetAnd1And2.y;
            int frame2 = animationInstances[animationInstanceOffset + i].frameOffsetAnd1And2.z;
            float frameBlend = animationInstances[animationInstanceOffset + i].timeAndBlendFactor.x;
            float blendFactor = animationInstances[animationInstanceOffset + i].timeAndBlendFactor.y;

            // Blending between two frames
            int frame1Index = frameOffset + frame1 * boneCount + currBoneIndex;
            int frame2Index = frameOffset + frame2 * boneCount + currBoneIndex;

            vec4 rotation1 = normalize(frames[frame1Index].rotation);
            vec4 rotation2 = normalize(frames[frame2Index].rotation);

            if (dot(rotation1, rotation2) < 0.0) { rotation1 *= -1.0; }

            vec3 position = mix(frames[frame1Index].position, frames[frame2Index].position, frameBlend);
            vec4 rotation = normalize(slerp(rotation1, rotation2, frameBlend));
            vec3 scale = mix(frames[frame1Index].scale, frames[frame2Index].scale, frameBlend);

            // Blending between animations
            totalBlendFactor += blendFactor;
            float blend = blendFactor / totalBlendFactor;

            accPose.position = mix(accPose.position, position, blend);
            accPose.rotation = normalize(slerp(accPose.rotation, rotation, blend));
            accPose.scale = mix(accPose.scale, scale, blend);
        }

        boneMatrix = ToMatrix(accPose.position, accPose.rotation, accPose.scale) * boneMatrix;

        currBoneIndex = bones[boneOffset + currBoneIndex].parent;

        if (currBoneIndex == -1)
        {
            break;
        }
    }

    return boneMatrix;
}

layout (local_size_x = 128, local_size_y = 1, local_size_z = 1) in;

void main()  {
    int instanceIndex = int(gl_WorkGroupID.x);
    int boneIndex = int(gl_LocalInvocationID.x);
    int boneCount = int(min(128, instances[instanceIndex].boneAndInstanceOffsetAndCount.y));

    if (boneIndex < boneCount) {
        int boneOffset = instances[instanceIndex].boneAndInstanceOffsetAndCount.x;
        int animationInstanceOffset = instances[instanceIndex].boneAndInstanceOffsetAndCount.z;
        int animationInstanceCount = instances[instanceIndex].boneAndInstanceOffsetAndCount.w;
        int boneOutputOffset = instances[instanceIndex].boneOutputOffset;

        mat4 offset = bones[boneOffset + boneIndex].offset;
        boneOutput[boneOutputOffset + boneIndex] = GetPose(animationInstanceOffset, animationInstanceCount, boneIndex, boneOffset, boneCount) * offset;
    }
}